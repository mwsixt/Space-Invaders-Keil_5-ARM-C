


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             interrupts, CODE, READWRITE
    2 00000000                 EXPORT           lab7
    3 00000000                 EXPORT           FIQ_Handler
    4 00000000                 EXPORT           pin_connect_block_setup_for_uar
t0
    5 00000000                 EXPORT           interrupt_init
    6 00000000                 EXPORT           display_digit_on_7_seg
    7 00000000                 EXPORT           illuminateLEDs
    8 00000000                 EXPORT           illuminate_RGB_LED
    9 00000000                 EXPORT           output_string
   10 00000000                 EXPORT           output_character
   11 00000000                 EXPORT           update_score
   12 00000000                 EXPORT           read_character
   13 00000000                 EXPORT           start_timers
   14 00000000                 EXPORT           update_level
   15 00000000                 EXPORT           read_string
   16 00000000                 EXPORT           stop_timers
   17 00000000         
   18 00000000                 EXTERN           decTime
   19 00000000                 EXTERN           printBoard
   20 00000000                 EXTERN           movePlayer
   21 00000000                 EXTERN           updateBoard
   22 00000000                 EXTERN           moveMother
   23 00000000                 EXTERN           generateMother
   24 00000000                 EXTERN           generatePlayerShot
   25 00000000                 EXTERN           moveShot
   26 00000000                 EXTERN           generateEnemyShot
   27 00000000                 GET              library7.s
    1 00000000                 AREA             library, CODE, READWRITE
    2 00000000         
    3 00000000 00000014 
                       U0LSR   EQU              0x14        ; UART0 Line Status
                                                             Register
    4 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
    5 00000000 E002C004 
                       PINSEL1 EQU              0xE002C004
    6 00000000 E0028008 
                       IO0DIR  EQU              0xE0028008
    7 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
    8 00000000 E0028004 
                       IO0SET  EQU              0xE0028004
    9 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   10 00000000 E002800C 
                       IO0CLR  EQU              0xE002800C
   11 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   12 00000000 E0028000 
                       IO0PIN  EQU              0xE0028000
   13 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010
   14 00000000         
   15 00000000 00000026 
                       WHITE   EQU              0x26
   16 00000000 00000002 
                       RED     EQU              0x2
   17 00000000 00000020 



ARM Macro Assembler    Page 2 


                       GREEN   EQU              0x20
   18 00000000 00000004 
                       BLUE    EQU              0x4
   19 00000000 00000006 
                       PURPLE  EQU              0x6
   20 00000000 00000022 
                       YELLOW  EQU              0x22
   21 00000000 00000000 
                       RGBOFF  EQU              0x0
   22 00000000         
   23 00000000 45 72 72 
              6F 72 2C 
              20 50 6C 
              65 61 73 
              65 20 65 
              6E 74 65 
              72 20 61 
              20 34 20 
              62 69 74 
              20 62 69 
              6E 61 72 
              79 20 73 
              74 72 69 
              6E 67 20 
              00       ledErr  =                "Error, Please enter a 4 bit bi
nary string ",0
   24 0000002B 00              ALIGN
   25 0000002C 45 72 72 
              6F 72 2C 
              20 50 6C 
              65 61 73 
              65 20 65 
              6E 74 65 
              72 20 77 
              2C 72 2C 
              67 2C 62 
              2C 79 2C 
              6F 72 20 
              70 20 66 
              6F 72 20 
              61 20 63 
              6F 6C 6F 
              72 20 63 
              68 6F 69 
              63 65 20 
              00       rgbErr  =                "Error, Please enter w,r,g,b,y,
or p for a color choice ",0
   26 00000063 00              ALIGN
   27 00000064 45 72 72 
              6F 72 2C 
              20 50 6C 
              65 61 73 
              65 20 65 
              6E 74 65 
              72 20 61 
              20 68 65 
              78 61 64 
              65 63 69 
              6D 61 6C 



ARM Macro Assembler    Page 3 


              20 62 69 
              74 20 00 segErr  =                "Error, Please enter a hexadeci
mal bit ",0
   28 0000008B 00              ALIGN
   29 0000008C 57 68 69 
              63 68 20 
              73 65 67 
              6D 65 6E 
              74 20 77 
              6F 75 6C 
              64 20 79 
              6F 75 20 
              6C 69 6B 
              65 20 74 
              6F 20 73 
              68 6F 77 
              3F 20 28 
              31 2D 34 
              29 00    segPrompt
                               =                "Which segment would you like t
o show? (1-4)",0
   30 000000B8                 ALIGN
   31 000000B8 04      segPos  =                4
   32 000000B9 00 00 00        ALIGN
   33 000000BC 31 31 31 
              31 31 31 
              31 31 00 tailLoc =                "11111111",0
   34 000000C5 00 00 00        ALIGN
   35 000000C8 34 66 35 
              66 00    input   =                "4f5f",0
   36 000000CD 00 00 00        ALIGN
   37 000000D0         read_character
   38 000000D0 E59F19E0        LDR              r1,=0xE000C000 
                                                            ;Load Base Address 
                                                            
   39 000000D4 E5D13014        LDRB             r3,[r1,#U0LSR] ;Load Line Statu
                                                            s Register 
   40 000000D8 E2032001        AND              r2,r3,#1    ;And 1st bit of Lin
                                                            e status register w
                                                            ith one 
   41 000000DC E3520000        CMP              r2,#0       ;Compare result wit
                                                            h false
   42 000000E0 0AFFFFFE        BEQ              read_character ;If false, repea
                                                            t until status chan
                                                            ges
   43 000000E4 E1A00003        MOV              r0,r3       ;Copy line status r
                                                            egister to temp reg
                                                            ister
   44 000000E8 E5D10000        LDRB             r0,[r1]     ;Load base with tem
                                                            p register 
   45 000000EC E1A01000        MOV              r1,r0
   46 000000F0 E12FFF1E        BX               lr
   47 000000F4         
   48 000000F4         output_character
   49 000000F4 E59F19BC        LDR              r1,=0xE000C000 
                                                            ;r1 = Base register
                                                            
   50 000000F8 E5D13014        LDRB             r3,[r1,#U0LSR] ;Load Line Statu
                                                            s register to r3



ARM Macro Assembler    Page 4 


   51 000000FC E2032020        AND              r2,r3,#32   ;Anding 5th bit of 
                                                            line status registe
                                                            r and storing in re
                                                            sult
   52 00000100 E3520000        CMP              r2,#0       ;Compare result to 
                                                            0
   53 00000104 0AFFFFFE        BEQ              output_character ;If val at lin
                                                            e status register=0
                                                            , loop back to star
                                                            t
   54 00000108 E5810000        STR              r0,[r1]     ;Else, Load value o
                                                            f receiver buffer r
                                                            egister with line s
                                                            tatus register
   55 0000010C E12FFF1E        BX               lr
   56 00000110         
   57 00000110         read_string
   58 00000110 E92D403F        STMFD            sp!, {r0-r5,lr}
   59 00000114 E59F49A0        LDR              r4,=input   ;Set head to predef
                                                            ined value
   60 00000118 E1A05004        MOV              r5,r4       ;Set tail to head
   61 0000011C E59F1994        LDR              r1,=0xE000C000 ;Set r1 to UART 
                                                            base address
   62 00000120         read_loop
   63 00000120 EBFFFFFE        BL               read_character ;Goto read chara
                                                            cter sub
   64 00000124 EBFFFFFE        BL               output_character ;Goto output c
                                                            haracter sub
   65 00000128 E350000D        CMP              r0,#13      ;Is char enter?
   66 0000012C 1A000000        BNE              not_end     ;If not, then skip 
                                                            next step
   67 00000130 E3A00000        MOV              r0,#0       ;Change read char t
                                                            o null
   68 00000134         not_end
   69 00000134 E5C50000        STRB             r0,[r5]     ;Store char to tail
                                                            
   70 00000138 E2855001        ADD              r5,r5,#1    ;Increment tail
   71 0000013C E3500000        CMP              r0,#0       ;Is char null?
   72 00000140 1AFFFFF6        BNE              read_loop   ;If not, loop 
   73 00000144 E3A0000A        MOV              r0, #10     ;Else, store char t
                                                            o vertical tab
   74 00000148 E5810000        STR              r0,[r1]     ;Output vertical ta
                                                            b
   75 0000014C E3A0000D        MOV              r0, #13     ;Store char to carr
                                                            iage return
   76 00000150 E5810000        STR              r0,[r1]     ;Output carriage re
                                                            turn
   77 00000154 E1A05004        MOV              r5,r4       ;Set tail to head
   78 00000158 E8BD403F        LDMFD            sp!, {r0-r5,lr} ;Restore link r
                                                            egister
   79 0000015C E12FFF1E        BX               lr
   80 00000160         
   81 00000160         output_string
   82 00000160 E92D4000        STMFD            SP!,{lr}    ;Store link address
                                                            
   83 00000164 E1A04000        MOV              r4,r0
   84 00000168 E5D40000        LDRB             r0,[r4]     ;Load value from he
                                                            ad
   85 0000016C E59F1944        LDR              r1,=0xE000C000 ;Set r1 to UART 



ARM Macro Assembler    Page 5 


                                                            base
   86 00000170         output_string_loop
   87 00000170 EBFFFFFE        BL               output_character ;Goto output_c
                                                            haracter with link
   88 00000174 E2844001        ADD              r4,r4,#1    ;Increment tail to 
                                                            next mem location
   89 00000178 E5D40000        LDRB             r0,[r4]     ;Load head with cha
                                                            r
   90 0000017C E3500000        CMP              r0,#0       ;Compare r0 with nu
                                                            ll
   91 00000180 0A000000        BEQ              output_string_end 
                                                            ;If so, goto end
   92 00000184 EAFFFFF9        B                output_string_loop 
                                                            ;Else, goto loop
   93 00000188         output_string_end
   94 00000188 E3A0000A        MOV              r0, #10     ;Store char as vert
                                                             tab
   95 0000018C E5810000        STR              r0,[r1]     ;Output vert tab
   96 00000190 E3A0000D        MOV              r0, #13     ;Store char as carr
                                                            iage return
   97 00000194 E5810000        STR              r0,[r1]     ;Output carr return
                                                            
   98 00000198 E1A05004        MOV              r5,r4
   99 0000019C E1A00004        MOV              r0,r4
  100 000001A0 E8BD4000        LDMFD            sp!, {lr}   ;load link address
  101 000001A4 E12FFF1E        BX               lr          ;Link back
  102 000001A8         
  103 000001A8         display_digit_on_7_seg
  104 000001A8 E92D4000        STMFD            SP!,{lr}    ;Store link registe
                                                            r
  105 000001AC         ;r4 begining r5 end
  106 000001AC E3A06000        MOV              r6,#0       ;Store 0 to r6
  107 000001B0 E59F3908        LDR              r3,=segPos  ;Sets r3 to equal l
                                                            ocation of segment 
                                                            position counter
  108 000001B4 E5D37000        LDRB             r7,[r3]     ;Sets r7 to value o
                                                            f segment position 
                                                            counter
  109 000001B8 E3570004        CMP              r7,#4       ;Is seg pos counter
                                                             4?
  110 000001BC 1A000001        BNE              dglup       ;If not goto loop
  111 000001C0 E59F38FC        LDR              r3,=tailLoc ;If it is, load tai
                                                            l location into r3
  112 000001C4 E5834000        STR              r4,[r3]     ;Store head to tail
                                                             location
  113 000001C8         dglup
  114 000001C8 E59F38F4        LDR              r3,=tailLoc ;Set r3 to location
                                                             of tail location
  115 000001CC E5935000        LDR              r5,[r3]     ;Load tail location
                                                             into r5
  116 000001D0         
  117 000001D0 E5D53000        LDRB             r3,[r5]     ;Load char
  118 000001D4         
  119 000001D4 E3530000        CMP              r3,#0
  120 000001D8 0A00003B        BEQ              tisNull
  121 000001DC E3530023        CMP              r3,#35      ;Is char #?
  122 000001E0 0A000035        BEQ              tisInit     ;Goto init
  123 000001E4         
  124 000001E4 E59F98DC        LDR              r9,=IO0SET



ARM Macro Assembler    Page 6 


  125 000001E8 E1D990B0        LDRH             r9,[r9]
  126 000001EC E59F18D8        LDR              r1,=IO0CLR  ;Load clear registe
                                                            r
  127 000001F0 E59F28D8        LDR              r2,=46976   ;Clear all segs
  128 000001F4 E5812000        STR              r2,[r1]     ;Store to clear reg
                                                            ister
  129 000001F8 E3530021        CMP              r3,#33      ;Is char !?
  130 000001FC 0A000037        BEQ              tisClear    ;Goto clear
  131 00000200         
  132 00000200 E3530030        CMP              r3,#0x30    ;Is char 1-9 or A-F
                                                             (not case sensitiv
                                                            e)
  133 00000204 0A000037        BEQ              tis0        ;Goto respective la
                                                            bel
  134 00000208 E3530031        CMP              r3,#0x31
  135 0000020C 0A000037        BEQ              tis1
  136 00000210 E3530032        CMP              r3,#0x32
  137 00000214 0A000037        BEQ              tis2
  138 00000218 E3530033        CMP              r3,#0x33
  139 0000021C 0A000037        BEQ              tis3
  140 00000220 E3530034        CMP              r3,#0x34
  141 00000224 0A000037        BEQ              tis4
  142 00000228 E3530035        CMP              r3,#0x35
  143 0000022C 0A000037        BEQ              tis5
  144 00000230 E3530036        CMP              r3,#0x36
  145 00000234 0A000037        BEQ              tis6
  146 00000238 E3530037        CMP              r3,#0x37
  147 0000023C 0A000037        BEQ              tis7
  148 00000240 E3530038        CMP              r3,#0x38
  149 00000244 0A000037        BEQ              tis8
  150 00000248 E3530039        CMP              r3,#0x39
  151 0000024C 0A000037        BEQ              tis9
  152 00000250 E3530041        CMP              r3,#0x41
  153 00000254 0A000037        BEQ              tisA
  154 00000258 E3530061        CMP              r3,#0x61
  155 0000025C 0A000035        BEQ              tisA
  156 00000260 E3530042        CMP              r3,#0x42
  157 00000264 0A000035        BEQ              tisB
  158 00000268 E3530062        CMP              r3,#0x62
  159 0000026C 0A000033        BEQ              tisB
  160 00000270 E3530043        CMP              r3,#0x43
  161 00000274 0A000033        BEQ              tisC
  162 00000278 E3530063        CMP              r3,#0x63
  163 0000027C 0A000031        BEQ              tisC
  164 00000280 E3530044        CMP              r3,#0x44
  165 00000284 0A000031        BEQ              tisD
  166 00000288 E3530064        CMP              r3,#0x64
  167 0000028C 0A00002F        BEQ              tisD
  168 00000290 E3530045        CMP              r3,#0x45
  169 00000294 0A00002F        BEQ              tisE
  170 00000298 E3530065        CMP              r3,#0x65
  171 0000029C 0A00002D        BEQ              tisE
  172 000002A0 E3530046        CMP              r3,#0x46
  173 000002A4 0A00002D        BEQ              tisF
  174 000002A8 E3530066        CMP              r3,#0x66
  175 000002AC 0A00002B        BEQ              tisF
  176 000002B0 EA000003        B                tisInv      ;If anything else, 
                                                            goto err
  177 000002B4 E8BD4000        LDMFD            sp!, {lr}   ;Restore link regis



ARM Macro Assembler    Page 7 


                                                            ter
  178 000002B8 E12FFF1E        BX               lr          ;Go back to whence 
                                                            you came
  179 000002BC         tisInit
  180 000002BC E3A06902        LDR              r6,=32768   ;Load g segment
  181 000002C0 EA000028        B                sevenSegCont
  182 000002C4         tisInv
  183 000002C4 E1A06009        MOV              r6,r9       ;If invalid value, 
                                                            ignore it
  184 000002C8 EA000026        B                sevenSegCont
  185 000002CC         tisNull
  186 000002CC E59F37F0        LDR              r3,=tailLoc ;Load r3 with tailL
                                                            oc location
  187 000002D0 E2455001        SUB              r5,r5,#1    ;Subtract r5 by 1
  188 000002D4 E5835000        STR              r5,[r3]     ;Store to tailLoc
  189 000002D8         
  190 000002D8 E8BD4000        LDMFD            sp!, {lr}   ;Load link reg 
  191 000002DC E12FFF1E        BX               lr          ;Leave program
  192 000002E0         tisClear
  193 000002E0 E3A06000        LDR              r6,=0       ;Load 0
  194 000002E4 EA00001F        B                sevenSegCont
  195 000002E8         tis0
  196 000002E8 E3A06DDE        LDR              r6, =14208  ;14208 turns a,b,c,
                                                            d,e,f on
  197 000002EC EA00001D        B                sevenSegCont
  198 000002F0         tis1
  199 000002F0 E3A06C03        LDR              r6, =0x300  ;768 turns b&c on
  200 000002F4 EA00001B        B                sevenSegCont
  201 000002F8         tis2
  202 000002F8 E59F67D4        LDR              r6, =0x9580 ;48512 turns a,b,g,
                                                            e,d on
  203 000002FC EA000019        B                sevenSegCont
  204 00000300         tis3
  205 00000300 E59F67D0        LDR              r6, =0x8780 ;40832 turns a,b,c,
                                                            d,g on
  206 00000304 EA000017        B                sevenSegCont
  207 00000308         tis4
  208 00000308 E3A06CA3        LDR              r6, =0xA300 ;41728 turns b,c,f,
                                                            g on
  209 0000030C EA000015        B                sevenSegCont
  210 00000310         tis5
  211 00000310 E59F67C4        LDR              r6, =0xA680 ;42624 turns a,c,d,
                                                            f,g on
  212 00000314 EA000013        B                sevenSegCont
  213 00000318         tis6
  214 00000318 E59F67C0        LDR              r6, =0xB680 ;46720 turns a,c,d,
                                                            e,f,g on
  215 0000031C EA000011        B                sevenSegCont
  216 00000320         tis7
  217 00000320 E3A06D0E        LDR              r6, =0x380  ;896 turns a,b,c on
                                                            
  218 00000324 EA00000F        B                sevenSegCont
  219 00000328         tis8
  220 00000328 E59F67A0        LDR              r6, =0xB780 ;46976 turns all of
                                                             them on
  221 0000032C EA00000D        B                sevenSegCont
  222 00000330         tis9
  223 00000330 E59F67AC        LDR              r6, =0xA380 ;41856 turns a,b,c,
                                                            f,g on



ARM Macro Assembler    Page 8 


  224 00000334 EA00000B        B                sevenSegCont
  225 00000338         tisA
  226 00000338 E59F67A8        LDR              r6, =0xB380 ;45952 turns a,b,c,
                                                            e,f,g on
  227 0000033C EA000009        B                sevenSegCont
  228 00000340         tisB
  229 00000340 E3A06CB6        LDR              r6, =0xB600 ;46592 turns c,d,e,
                                                            f,g on
  230 00000344 EA000007        B                sevenSegCont
  231 00000348         tisC
  232 00000348 E3A06DD2        LDR              r6, =0x3480 ;13440 turns a,d,e,
                                                            f on
  233 0000034C EA000005        B                sevenSegCont
  234 00000350         tisD
  235 00000350 E3A06C97        LDR              r6, =0x9700 ;38656 turns b,c,d,
                                                            g on
  236 00000354 EA000003        B                sevenSegCont
  237 00000358         tisE
  238 00000358 E59F678C        LDR              r6, =0xB480 ;46208 turns a,d,e,
                                                            f,g on
  239 0000035C EA000001        B                sevenSegCont
  240 00000360         tisF
  241 00000360 E59F6788        LDR              r6, =0xB080 ;45184 turns a,e,f,
                                                            g on
  242 00000364 EAFFFFFF        B                sevenSegCont
  243 00000368         sevenSegCont
  244 00000368 EAFFFFFF        B                sevenSegFin
  245 0000036C         ;LDRB r3,[r4,#1]   ;Load next char
  246 0000036C         ;CMP r3,#49    ;Is char 1-4?
  247 0000036C         ;BLE segsel1    ;Goto respective segsel
  248 0000036C         ;CMP r3,#50
  249 0000036C         ;BEQ segsel2
  250 0000036C         ;CMP r3,#51
  251 0000036C         ;BEQ segsel3
  252 0000036C         ;CMP r3,#52
  253 0000036C         ;BEQ segsel4
  254 0000036C         ;CMP r3,#53
  255 0000036C         ;BEQ segsel5
  256 0000036C         ;B segsel1
  257 0000036C         sevenSegFin
  258 0000036C E59F1780        LDR              r1,=IO0DIR  ;Load direction cho
                                                            oser
  259 00000370 E5913000        LDR              r3,[r1]
  260 00000374 E3A08826        LDR              r8,=2490368
  261 00000378 E0033008        AND              r3,r3,r8
  262 0000037C E59F274C        LDR              r2,=46976   ;Set reg to all seg
                                                            s
  263 00000380 E0822007        ADD              r2,r2,r7    ;Add desired digit
  264 00000384 E0822003        ADD              r2,r2,r3
  265 00000388 E5812000        STR              r2,[r1]     ;Store to direction
                                                            
  266 0000038C E1A02006        MOV              r2,r6       ;Load desired segme
                                                            nt value
  267 00000390 E59F1730        LDR              r1,=IO0SET  ;Load set register
  268 00000394 E5812000        STR              r2,[r1]     ;Store to set reg
  269 00000398         
  270 00000398 E5D53001        LDRB             r3,[r5,#1]  ;Load r3 with locat
                                                            ion of tail+1
  271 0000039C E3530000        CMP              r3,#0       ;Is it 0?



ARM Macro Assembler    Page 9 


  272 000003A0 1A000004        BNE              INCR        ;If not goto INCR
  273 000003A4         
  274 000003A4 E59F3714        LDR              r3,=segPos  ;Set r3 to segment 
                                                            position
  275 000003A8 E3A07004        MOV              r7,#4       ;Set r7 to 4
  276 000003AC E5C37000        STRB             r7,[r3]     ;Store 4 to segment
                                                             position
  277 000003B0         sevenSegExit
  278 000003B0 E8BD4000        LDMFD            sp!, {lr}   ;Restore Link addre
                                                            ss
  279 000003B4 E12FFF1E        BX               lr          ;Link back
  280 000003B8         
  281 000003B8         INCR
  282 000003B8 E59F3700        LDR              r3,=segPos  ;Load segPos locati
                                                            on
  283 000003BC E0877007        ADD              r7,r7,r7    ;double r7 to get n
                                                            ext seg,[r1]
  284 000003C0 E5C37000        STRB             r7,[r3]     ;Store new segPos
  285 000003C4         
  286 000003C4 E59F36F8        LDR              r3,=tailLoc ;Load tailLoc locat
                                                            ion
  287 000003C8 E2855001        ADD              r5,r5,#1    ;Increment r5
  288 000003CC E5835000        STR              r5,[r3]     ;Store in tailLoc 
  289 000003D0 EAFFFFF6        B                sevenSegExit ;Exit
  290 000003D4         seg_err
  291 000003D4 E59F471C        LDR              r4,=segErr  ;Load error prompt
  292 000003D8 EBFFFFFE        BL               output_string ;Output prompt
  293 000003DC EBFFFFFE        BL               read_string ;Scan for input
  294 000003E0 EAFFFFFE        B                display_digit_on_7_seg 
                                                            ;Rerun subroutine 
  295 000003E4         
  296 000003E4         ;segsel1 
  297 000003E4         ;LDR r7,=4    ;Set desired digit 1
  298 000003E4         ;B sevenSegFin   ;Goto Fin
  299 000003E4         ;segsel2 
  300 000003E4         ;LDR r7,=8    ;Set desired digit 2
  301 000003E4         ;B sevenSegFin   ;Goto Fin
  302 000003E4         ;segsel3 
  303 000003E4         ;LDR r7,=16    ;Set desired digit 3
  304 000003E4         ;B sevenSegFin   ;Goto Fin
  305 000003E4         ;segsel4 
  306 000003E4         ;LDR r7,=32    ;Set desired digit 4
  307 000003E4         ;B sevenSegFin   ;Goto Fin 
  308 000003E4         ;segsel5 
  309 000003E4         ;LDR r7,=60    ;Set desired digit all
  310 000003E4         ;B sevenSegFin   ;Goto Fin 
  311 000003E4         
  312 000003E4         illuminate_RGB_LED
  313 000003E4 E92D5FFF        STMFD            SP!,{r0-r12,lr} ;Store link reg
                                                            ister
  314 000003E8         color_select
  315 000003E8 E3500077        CMP              r0,#119     ;Is val=w?
  316 000003EC 0A00000A        BEQ              white       ;Goto white
  317 000003F0 E3500072        CMP              r0,#114     ;Is val=r?
  318 000003F4 0A00000C        BEQ              red         ;Goto red
  319 000003F8 E3500067        CMP              r0,#103     ;Is val=g?
  320 000003FC 0A000008        BEQ              green       ;Goto green
  321 00000400 E3500062        CMP              r0,#98      ;Is val=b?
  322 00000404 0A00000A        BEQ              blue        ;Goto blue



ARM Macro Assembler    Page 10 


  323 00000408 E3500079        CMP              r0,#121     ;Is val=y?
  324 0000040C 0A00000A        BEQ              yellow      ;Goto yellow
  325 00000410 E3500070        CMP              r0,#112     ;Is val=p?
  326 00000414 0A00000A        BEQ              purple      ;Goto purple
  327 00000418 EA000012        B                rgb_err     ;Else, goto error
  328 0000041C         white
  329 0000041C E3A00026        LDR              r0,=WHITE   ;Val=WHITE
  330 00000420 EA000009        B                rgb_cont    ;Goto cont
  331 00000424         green
  332 00000424 E3A00020        LDR              r0,=GREEN   ;Val=GREEN
  333 00000428 EA000007        B                rgb_cont    ;Goto cont
  334 0000042C         red
  335 0000042C E3A00002        LDR              r0,=RED     ;Val=RED
  336 00000430 EA000005        B                rgb_cont    ;Goto cont
  337 00000434         blue
  338 00000434 E3A00004        LDR              r0,=BLUE    ;Val=BLUE
  339 00000438 EA000003        B                rgb_cont    ;Goto cont
  340 0000043C         yellow
  341 0000043C E3A00022        LDR              r0,=YELLOW  ;Val=YELLOW
  342 00000440 EA000001        B                rgb_cont    ;Goto cont
  343 00000444         purple
  344 00000444 E3A00006        LDR              r0,=PURPLE  ;Val=PURPLE
  345 00000448 EAFFFFFF        B                rgb_cont    ;Goto cont
  346 0000044C         rgb_cont
  347 0000044C E59F16A8        LDR              r1,=PINSEL1 ;Select pinsel1
  348 00000450 E3A02001        MOV              r2,#1       ;store 1
  349 00000454 E5C12000        STRB             r2,[r1]     ;Write 1 to pinsel1
                                                            
  350 00000458 E59F1694        LDR              r1,=IO0DIR  ;Load IO0DIR
  351 0000045C E5C10000        STRB             r0,[r1]     ;Store val
  352 00000460 E8BD5FFF        LDMFD            sp!, {r0-r12,lr} ;Restore Link 
                                                            address
  353 00000464         
  354 00000464 E12FFF1E        BX               lr          ;Go back to whence 
                                                            you came
  355 00000468         rgb_err
  356 00000468 E59F4690        LDR              r4,=rgbErr  ;load error prompt
  357 0000046C EBFFFFFE        BL               output_string ;Output prompt
  358 00000470 EAFFFFFE        B                illuminate_RGB_LED ;Goto subrou
                                                            tine start
  359 00000474         
  360 00000474         
  361 00000474         read_from_push_btns
  362 00000474 E92D4000        STMFD            SP!,{lr}    ;Store link registe
                                                            r
  363 00000478 E3A00105        MOV              r0,#0x40000001 ;Goto arbitrary 
                                                            readable memory
  364 0000047C E59F1680        LDR              r1,=IO1DIR  ;Load direction reg
                                                            
  365 00000480 E5912000        LDR              r2,[r1]     ;Load data at direc
                                                            tion reg
  366 00000484 E2022000        AND              r2,r2,#0    ;Invert
  367 00000488 E5812000        STR              r2,[r1]     ;Store back
  368 0000048C E59F1674        LDR              r1,=IO1PIN  ;Load pin register
  369 00000490 E5D12002        LDRB             r2,[r1,#2]  ;Load pin reg offse
                                                            t by 2
  370 00000494 E1A02222        LSR              r2,r2,#4    ;Left shift by 4
  371 00000498 E262200F        RSB              r2,r2,#15   ;Subtract 15
  372 0000049C         



ARM Macro Assembler    Page 11 


  373 0000049C E3A06000        MOV              r6,#0       ;Set r6 to 0
  374 000004A0 E2027008        AND              r7,r2,#8    ;Check 3rd bit
  375 000004A4 E3570001        CMP              r7,#1       ;Is it 1?
  376 000004A8 1A000000        BNE              stage_two   ;If not, Goto stage
                                                             two
  377 000004AC E2866001        ADD              r6,r6,#1    ;Add 1 to r6
  378 000004B0         stage_two
  379 000004B0 E2027004        AND              r7,r2,#4    ;Check 2nd bit
  380 000004B4 E3570001        CMP              r7,#1       ;Is it 1?
  381 000004B8 1A000000        BNE              stage_three ;If not, Goto stage
                                                             three
  382 000004BC E2866002        ADD              r6,r6,#2    ;Add 2
  383 000004C0         stage_three
  384 000004C0 E2027002        AND              r7,r2,#2    ;Check 1st bit
  385 000004C4 E3570001        CMP              r7,#1       ;Is it 1?
  386 000004C8 1A000000        BNE              stage_four  ;If not, Goto stage
                                                             four
  387 000004CC E2866004        ADD              r6,r6,#4    ;Add 4
  388 000004D0         stage_four
  389 000004D0 E2027001        AND              r7,r2,#1    ;Check 0th bit
  390 000004D4 E3570001        CMP              r7,#1       ;is it 1?
  391 000004D8 1A000000        BNE              stage_fin   ;If not, Goto fin
  392 000004DC E2866008        ADD              r6,r6,#8    ;Add 8
  393 000004E0         stage_fin
  394 000004E0         ;MOV r2,r6
  395 000004E0 E3520009        CMP              r2,#9       ;Is r2 9 or less?
  396 000004E4 DA000003        BLE              btn_digit   ;Goto digit selecto
                                                            r
  397 000004E8 E352000F        CMP              r2,#15      ;is r2 A-F?
  398 000004EC DA000005        BLE              btn_letter  ;Goto Letter
  399 000004F0 E8BD4000        LDMFD            sp!, {lr}   ;Restore link regis
                                                            ter
  400 000004F4 E12FFF1E        BX               lr          ;Go back to whence 
                                                            you came
  401 000004F8         btn_digit
  402 000004F8 E2822030        ADD              r2,r2,#48   ;Get Ascii value of
                                                             digit
  403 000004FC E5C02000        STRB             r2,[r0]     ;Store to val
  404 00000500 E2800001        ADD              r0,r0,#1    ;Increment val
  405 00000504 EA000005        B                btn_end     ;Goto end
  406 00000508         btn_letter
  407 00000508 E3A03031        MOV              r3,#49      ;Set reg to 1 ascii
                                                             code
  408 0000050C E5C03000        STRB             r3,[r0]     ;Store to val
  409 00000510 E2800001        ADD              r0,r0,#1    ;Increment val
  410 00000514 E2822026        ADD              r2,r2,#38   ;Get ascii value of
                                                             remaining
  411 00000518 E5C02000        STRB             r2,[r0]     ;Store to val
  412 0000051C E2800001        ADD              r0,r0,#1    ;Increment val
  413 00000520         btn_end
  414 00000520 E3A03000        MOV              r3,#0       ;Store 0
  415 00000524 E5C03000        STRB             r3,[r0]     ;Store to val
  416 00000528 E5D40000        LDRB             r0,[r4]     ;Store val to strin
                                                            g head
  417 0000052C EBFFFFFE        BL               output_string ;Output val
  418 00000530 E8BD4000        LDMFD            sp!, {lr}   ;Restore link regis
                                                            ter
  419 00000534 E12FFF1E        BX               lr          ;Go back to whence 
                                                            you came



ARM Macro Assembler    Page 12 


  420 00000538         
  421 00000538         
  422 00000538         illuminateLEDs
  423 00000538 E92D5FFF        STMFD            SP!,{r0-r12,lr} ;Store link reg
                                                            ister
  424 0000053C E1A04000        MOV              r4,r0
  425 00000540 E3A03000        MOV              r3,#0       ;Set place counter 
                                                            to 0
  426 00000544 E3A06000        MOV              r6,#0       ;Set total to 0
  427 00000548         bit_loop
  428 00000548 E5D45000        LDRB             r5,[r4]     ;Load register with
                                                             value in string he
                                                            ad
  429 0000054C E3550030        CMP              r5,#48      ;Is val 0?
  430 00000550 0A000002        BEQ              led_cont    ;Goto cont
  431 00000554 E3550031        CMP              r5,#49      ;Is val 1?
  432 00000558 0A000000        BEQ              led_cont    ;Goto cont
  433 0000055C EA00000E        B                led_err     ;Else, goto error
  434 00000560         led_cont
  435 00000560 E2455030        SUB              r5,r5,#48   ;Get actual value f
                                                            rom ascii value
  436 00000564 E1A05315        LSL              r5,r5,r3    ;Shift value by pla
                                                            ce counter
  437 00000568 E2833001        ADD              r3,r3,#1    ;Increment place co
                                                            unter
  438 0000056C E0866005        ADD              r6,r6,r5    ;Add actual value t
                                                            o total
  439 00000570 E2844001        ADD              r4,r4,#1    ;Increment tail by 
                                                            1 
  440 00000574 E3530003        CMP              r3,#3       ;Is place counter 3
                                                            ?
  441 00000578 DAFFFFF2        BLE              bit_loop    ;If less than or eq
                                                            ual, goto loop
  442 0000057C E59F1578        LDR              r1,=PINSEL1 ;Load pinsel1
  443 00000580 E3A02001        MOV              r2,#1       ;Load 1
  444 00000584 E5C12000        STRB             r2,[r1]     ;Store 1 to pinsel1
                                                            
  445 00000588 E59F1574        LDR              r1,=IO1DIR  ;Load direction cho
                                                            oser
  446 0000058C E1A02006        MOV              r2,r6       ;Load desired pin(2
                                                            ) 
  447 00000590 E5C12000        STRB             r2,[r1]     ;Store pin to direc
                                                            tion
  448 00000594         led_end
  449 00000594 E8BD5FFF        LDMFD            sp!, {r0-r12,lr} ;Restore link 
                                                            register
  450 00000598 E12FFF1E        BX               lr          ;Go back to whence 
                                                            you came
  451 0000059C         led_err
  452 0000059C E59F4568        LDR              r4,=ledErr  ;Load error prompt
  453 000005A0 EBFFFFFE        BL               output_string ;output prompt
  454 000005A4 E12FFF1E        BX               lr          ;Go back to whence 
                                                            you came
  455 000005A8         
  456 000005A8         
  457 000005A8         UART_init
  458 000005A8 E92D4000        STMFD            SP!,{lr}
  459 000005AC E3A03083        MOV              r3,#131     ;Copy 131 to r3
  460 000005B0 E5C1300C        STRB             r3,[r1,#0xC] ;Store r1+0xC to 1



ARM Macro Assembler    Page 13 


                                                            31
  461 000005B4 E3A03078        MOV              r3,#120     ;Copy 120 to r3
  462 000005B8 E5C13000        STRB             r3,[r1]     ;Store 120 to r1
  463 000005BC E3A03000        MOV              r3,#0       ;Copy 0 to r3
  464 000005C0 E5C13004        STRB             r3,[r1,#0x4] ;Store 0 to r1+0x4
                                                            
  465 000005C4 E3A03003        MOV              r3,#3       ;Copy 3 to r3
  466 000005C8 E5C1300C        STRB             r3,[r1,#0xC] ;Store 3 to r1+0xC
                                                            
  467 000005CC E8BD4000        LDMFD            SP!, {lr}   ; Restore register 
                                                            lr from stack 
  468 000005D0 E12FFF1E        BX               lr          ;Go back to whence 
                                                            you came
  469 000005D4                 END
   28 000005D4 05      enemyTimerFin
                               =                5
   29 000005D5 00 00 00        ALIGN
   30 000005D8 00      currentEnemyTimer
                               =                0
   31 000005D9 00 00 00        ALIGN
   32 000005DC 01      mShipTimerEnd
                               =                1
   33 000005DD 00 00 00        ALIGN
   34 000005E0 00      mShipCurrent
                               =                0
   35 000005E1 00 00 00        ALIGN
   36 000005E4 00      currentGameTimer
                               =                0
   37 000005E5 00 00 00        ALIGN
   38 000005E8 01      onoffFlag
                               =                1
   39 000005E9 00 00 00        ALIGN
   40 000005EC 45 6E 74 
              65 72 20 
              61 20 34 
              20 64 69 
              67 69 74 
              20 68 65 
              78 61 64 
              65 63 69 
              6D 61 6C 
              20 6E 75 
              6D 62 65 
              72 2E 20 
              50 72 65 
              73 73 20 
              74 68 65 
              20 69 6E 
              74 65 72 
              72 75 70 
              74 20 62 
              75 74 74 
              6F 6E 20 
              74 6F 20 
              70 61 75 
              73 65 20 
              74 68 65 
              20 70 72 
              6F 67 72 



ARM Macro Assembler    Page 14 


              61 6D 2C 
              20 70 72 
              65 73 73 
              20 71 20 
              74 6F 20 
              65 78 69 
              74 00    prompt  =                "Enter a 4 digit hexadecimal nu
mber. Press the interrupt button to pause the program, press q to exit",0
   41 00000651 00 00 00        ALIGN
   42 00000654 21 21 21 
              21 00    seg_clear
                               =                "!!!!",0
   43 00000659 00 00 00        ALIGN
   44 0000065C 50 72 6F 
              67 72 61 
              6D 20 65 
              6E 64 65 
              64 00    endpr   =                "Program ended",0
   45 0000066A 00 00           ALIGN
   46 0000066C 31 31 31 
              31 00    tempStorage
                               =                "1111",0
   47 00000671 00 00 00        ALIGN
   48 00000674 20 00   charBuf =                " ",0
   49 00000676 00 00           ALIGN
   50 00000678         lab7
   51 00000678         ;Load initial values
   52 00000678 E92D4000        STMFD            sp!, {lr}   ;Store Link reg
   53 0000067C E59F4438        LDR              r4,=input   ;Load input
   54 00000680 E59F343C        LDR              r3,=tailLoc ;Load tail location
                                                            
   55 00000684 E5834000        STR              r4,[r3]     ;Store input to tai
                                                            l location
   56 00000688         
   57 00000688         EXIT
   58 00000688         ;Load exit prompt and leave program
   59 00000688 E59F4480        LDR              r4,=endpr   ;Load exit prompt
   60 0000068C EBFFFFFE        BL               output_string ;Display output p
                                                            rompt
   61 00000690 E8BD4000        LDMFD            sp!, {lr}   ;Load link reg
   62 00000694 E12FFF1E        BX               lr          ;Go back to whence 
                                                            you came
   63 00000698         
   64 00000698         update_level
   65 00000698 E92D4000        STMFD            sp!, {lr}
   66 0000069C E59F1470        LDR              r1,=enemyTimerFin
   67 000006A0 E5910000        LDR              r0,[r1]
   68 000006A4 E2400005        SUB              r0,r0,#5
   69 000006A8 E5810000        STR              r0,[r1]
   70 000006AC E8BD4000        LDMFD            sp!, {lr}
   71 000006B0 E12FFF1E        BX               lr
   72 000006B4         
   73 000006B4         update_score
   74 000006B4 E92D4000        STMFD            sp!, {lr}
   75 000006B8 E5903000        LDR              r3,[r0]
   76 000006BC E59F43F8        LDR              r4,=input
   77 000006C0 E5843000        STR              r3,[r4]
   78 000006C4 E8BD4000        LDMFD            sp!, {lr}
   79 000006C8 E12FFF1E        BX               lr



ARM Macro Assembler    Page 15 


   80 000006CC         start_timers
   81 000006CC E92D4003        STMFD            sp!, {r0-r1,lr}
   82 000006D0 E59F0440        LDR              r0,=0xE0004004
   83 000006D4 E5901000        LDR              r1,[r0]
   84 000006D8 E3811001        ORR              r1,r1,#1
   85 000006DC E5801000        STR              r1,[r0]
   86 000006E0 E59F0434        LDR              r0,=0xE0008004
   87 000006E4 E5901000        LDR              r1,[r0]
   88 000006E8 E3811001        ORR              r1,r1,#1
   89 000006EC E5801000        STR              r1,[r0]
   90 000006F0         ;UART Setup
   91 000006F0 E59F0428        LDR              r0,=0xE000c004
   92 000006F4 E5901000        LDR              r1, [r0]
   93 000006F8 E3811001        ORR              r1,r1,#1
   94 000006FC E5801000        STR              r1, [r0]
   95 00000700 E8BD4003        LDMFD            sp!, {r0-r1,lr}
   96 00000704 E12FFF1E        BX               lr
   97 00000708         stop_timers
   98 00000708 E92D4003        STMFD            sp!, {r0-r1,lr}
   99 0000070C E59F0404        LDR              r0,=0xE0004004
  100 00000710 E5901000        LDR              r1,[r0]
  101 00000714 E3C11001        BIC              r1,r1,#1
  102 00000718 E5801000        STR              r1,[r0]
  103 0000071C E59F03F8        LDR              r0,=0xE0008004
  104 00000720 E5901000        LDR              r1,[r0]
  105 00000724 E3C11001        BIC              r1,r1,#1
  106 00000728 E5801000        STR              r1,[r0]
  107 0000072C         ;UART Setup
  108 0000072C E59F03EC        LDR              r0,=0xE000c004
  109 00000730 E5901000        LDR              r1, [r0]
  110 00000734 E3C11001        BIC              r1,r1,#1
  111 00000738 E5801000        STR              r1, [r0]
  112 0000073C E8BD4003        LDMFD            sp!, {r0-r1,lr}
  113 00000740 E12FFF1E        BX               lr
  114 00000744         handle_Char
  115 00000744 E92D4000        STMFD            sp!, {lr}
  116 00000748 E59F33D4        LDR              r3,=charBuf
  117 0000074C E5D30000        LDRB             r0,[r3]
  118 00000750 E3500077        CMP              r0,#119
  119 00000754 0A000041        BEQ              shoot
  120 00000758 E3500057        CMP              r0,#87
  121 0000075C 0A00003F        BEQ              shoot
  122 00000760 E3500061        CMP              r0,#97
  123 00000764 0A000045        BEQ              move_player
  124 00000768 E3500041        CMP              r0,#65
  125 0000076C 0A000043        BEQ              move_player
  126 00000770 E3500064        CMP              r0,#100
  127 00000774 0A000041        BEQ              move_player
  128 00000778 E3500044        CMP              r0,#68
  129 0000077C 0A00003F        BEQ              move_player
  130 00000780         
  131 00000780 E59F039C        LDR              r0,=charBuf
  132 00000784 E3A01020        MOV              r1,#32
  133 00000788 E5C01000        STRB             r1,[r0]
  134 0000078C E8BD4000        LDMFD            sp!, {lr}
  135 00000790 E12FFF1E        BX               lr
  136 00000794         interrupt_init
  137 00000794 E92D4003        STMFD            SP!, {r0-r1, lr} 
                                                            ; Save registers 



ARM Macro Assembler    Page 16 


  138 00000798         
  139 00000798         ;Push button setup   
  140 00000798 E59F0388        LDR              r0, =0xE002C000
  141 0000079C E5901000        LDR              r1, [r0]
  142 000007A0 E3811202        ORR              r1, r1, #0x20000000
  143 000007A4 E3C11201        BIC              r1, r1, #0x10000000
  144 000007A8 E5801000        STR              r1, [r0]    ; PINSEL0 bits 29:2
                                                            8 = 10
  145 000007AC         
  146 000007AC         ;timer0 setup
  147 000007AC E59F0378        LDR              r0,=0xE0004014
  148 000007B0 E5901000        LDR              r1,[r0]
  149 000007B4 E3811018        ORR              r1,r1,#24
  150 000007B8 E3C11007        BIC              r1,r1,#7
  151 000007BC E5801000        STR              r1,[r0]
  152 000007C0         
  153 000007C0         ;timer1 setup
  154 000007C0 E59F0368        LDR              r0,=0xE0008014
  155 000007C4 E5901000        LDR              r1,[r0]
  156 000007C8 E3811018        ORR              r1,r1,#24
  157 000007CC E3C11007        BIC              r1,r1,#7
  158 000007D0 E5801000        STR              r1,[r0]
  159 000007D4         
  160 000007D4         ;Set up timer0 to run at 
  161 000007D4 E59F0358        LDR              r0,=0xE000401C
  162 000007D8 E59F1358        LDR              r1,=4608000
  163 000007DC E5801000        STR              r1,[r0]
  164 000007E0         ;LDR r0,=0xE0004004
  165 000007E0         ;LDR r1,[r0]
  166 000007E0         ;ORR r1,r1,#1
  167 000007E0         ;STR r1,[r0]
  168 000007E0         
  169 000007E0         ;Set up timer1 to run at 500Hz
  170 000007E0 E59F0354        LDR              r0,=0xE000801C
  171 000007E4 E3A01B12        LDR              r1,=18432
  172 000007E8 E5801000        STR              r1,[r0]
  173 000007EC         ;LDR r0,=0xE0008004
  174 000007EC         ;LDR r1,[r0]
  175 000007EC         ;ORR r1,r1,#1
  176 000007EC         ;STR r1,[r0]
  177 000007EC         
  178 000007EC         ; Classify sources as IRQ or FIQ
  179 000007EC E59F034C        LDR              r0, =0xFFFFF000
  180 000007F0 E590100C        LDR              r1, [r0, #0xC]
  181 000007F4 E59F2348        LDR              r2, =0x8070
  182 000007F8 E1811002        ORR              r1, r1, r2  ; External Interrup
                                                            t 1, UART 0, & Time
                                                            r 0
  183 000007FC E580100C        STR              r1, [r0, #0xC]
  184 00000800         
  185 00000800         ; Enable Interrupts
  186 00000800 E59F0338        LDR              r0, =0xFFFFF000
  187 00000804 E5901010        LDR              r1, [r0, #0x10]
  188 00000808 E59F2334        LDR              r2, =0x8070
  189 0000080C E1811002        ORR              r1, r1, r2  ; External Interrup
                                                            t 1
  190 00000810 E5801010        STR              r1, [r0, #0x10]
  191 00000814         
  192 00000814         ; External Interrupt 1 setup for edge sensitive



ARM Macro Assembler    Page 17 


  193 00000814 E59F032C        LDR              r0, =0xE01FC148
  194 00000818 E5901000        LDR              r1, [r0]
  195 0000081C E3811002        ORR              r1, r1, #2  ; EINT1 = Edge Sens
                                                            itive
  196 00000820 E5801000        STR              r1, [r0]
  197 00000824         
  198 00000824         ; Enable FIQ's, Disable IRQ's
  199 00000824 E10F0000        MRS              r0, CPSR
  200 00000828 E3C00040        BIC              r0, r0, #0x40
  201 0000082C E3800080        ORR              r0, r0, #0x80
  202 00000830 E121F000        MSR              CPSR_c, r0
  203 00000834         
  204 00000834 E8BD4003        LDMFD            SP!, {r0-r1, lr} 
                                                            ; Restore registers
                                                            
  205 00000838 E12FFF1E        BX               lr          ; Return
  206 0000083C         
  207 0000083C         
  208 0000083C         FIQ_Handler
  209 0000083C E92D5FFF        STMFD            SP!, {r0-r12, lr} 
                                                            ; Save registers 
  210 00000840         
  211 00000840         
  212 00000840         UARTINT0
  213 00000840         ;Check for UART interrupt
  214 00000840 E59F0304        LDR              r0,=0xE000C008
  215 00000844 E5901000        LDR              r1, [r0]
  216 00000848 E3110001        TST              r1,#1
  217 0000084C 1A000013        BNE              TIMERINT0
  218 00000850         
  219 00000850         ;Read string and check flag status
  220 00000850 EBFFFFFE        BL               read_character ;Read string
  221 00000854 E59F32C8        LDR              r3,=charBuf
  222 00000858 E5C30000        STRB             r0,[r3]
  223 0000085C         ;If value is q, exit program
  224 0000085C EA00008B        B                FIQ_Exit    ;Goto interrupt exi
                                                            t
  225 00000860         shoot
  226 00000860 E59F12E8        LDR              r1,=generatePlayerShot
  227 00000864 E1A0E00F        MOV              lr,pc
  228 00000868 E12FFF11        BX               r1
  229 0000086C E59F02B0        LDR              r0,=charBuf
  230 00000870 E3A01020        MOV              r1,#32
  231 00000874 E5C01000        STRB             r1,[r0]
  232 00000878 E8BD4000        LDMFD            sp!, {lr}
  233 0000087C E12FFF1E        BX               lr
  234 00000880         move_player
  235 00000880 E59F12CC        LDR              r1,=movePlayer
  236 00000884 E1A0E00F        MOV              lr,pc
  237 00000888 E12FFF11        BX               r1
  238 0000088C E59F0290        LDR              r0,=charBuf
  239 00000890 E3A01020        MOV              r1,#32
  240 00000894 E5C01000        STRB             r1,[r0]
  241 00000898 E8BD4000        LDMFD            sp!, {lr}
  242 0000089C E12FFF1E        BX               lr
  243 000008A0         
  244 000008A0         TIMERINT0
  245 000008A0         ;Check for timer interrupt
  246 000008A0 E59F02B0        LDR              r0, =0xE0004000



ARM Macro Assembler    Page 18 


  247 000008A4 E5901000        LDR              r1, [r0]
  248 000008A8 E3110002        TST              r1,#2
  249 000008AC 0A000033        BEQ              TIMERINT1
  250 000008B0         
  251 000008B0 E59F025C        LDR              r0,=enemyTimerFin
  252 000008B4 E5900000        LDR              r0,[r0]
  253 000008B8 E59F129C        LDR              r1,=currentEnemyTimer
  254 000008BC E5911000        LDR              r1,[r1]
  255 000008C0 E1500001        CMP              r0,r1
  256 000008C4 0A000013        BEQ              doUpdateBoard
  257 000008C8 E2810001        ADD              r0,r1,#1
  258 000008CC E59F1288        LDR              r1,=currentEnemyTimer
  259 000008D0 E5C10000        STRB             r0,[r1]
  260 000008D4         
  261 000008D4 E59F0284        LDR              r0,=mShipTimerEnd
  262 000008D8 E5900000        LDR              r0,[r0]
  263 000008DC E59F1280        LDR              r1,=mShipCurrent
  264 000008E0 E5911000        LDR              r1,[r1]
  265 000008E4 E1500001        CMP              r0,r1
  266 000008E8 0A000003        BEQ              doMoveMShip
  267 000008EC E2810001        ADD              r0,r1,#1
  268 000008F0 E59F126C        LDR              r1,=mShipCurrent
  269 000008F4 E5C10000        STRB             r0,[r1]
  270 000008F8 EA00000D        B                timer0_cont
  271 000008FC         doMoveMShip
  272 000008FC E3A00000        MOV              r0,#0
  273 00000900 E59F125C        LDR              r1,=mShipCurrent
  274 00000904 E5C10000        STRB             r0,[r1]
  275 00000908 E59F1258        LDR              r1,=moveMother
  276 0000090C E1A0E00F        MOV              lr,pc
  277 00000910 E12FFF11        BX               r1
  278 00000914 EA000006        B                timer0_cont
  279 00000918         doUpdateBoard
  280 00000918 E3A00000        MOV              r0,#0
  281 0000091C E59F1238        LDR              r1,=currentEnemyTimer
  282 00000920 E5C10000        STRB             r0,[r1]
  283 00000924 E59F1240        LDR              r1,=updateBoard
  284 00000928 E1A0E00F        MOV              lr,pc
  285 0000092C E12FFF11        BX               r1
  286 00000930 EAFFFFFF        B                timer0_cont
  287 00000934         
  288 00000934         timer0_cont
  289 00000934 E59F1234        LDR              r1,=generateMother
  290 00000938 E1A0E00F        MOV              lr,pc
  291 0000093C E12FFF11        BX               r1
  292 00000940         
  293 00000940 E59F122C        LDR              r1,=generateEnemyShot
  294 00000944 E1A0E00F        MOV              lr,pc
  295 00000948 E12FFF11        BX               r1
  296 0000094C         
  297 0000094C EBFFFF7C        BL               handle_Char
  298 00000950         
  299 00000950 E59F1220        LDR              r1,=moveShot
  300 00000954 E1A0E00F        MOV              lr,pc
  301 00000958 E12FFF11        BX               r1
  302 0000095C         
  303 0000095C E59F1218        LDR              r1,=printBoard
  304 00000960 E1A0E00F        MOV              lr,pc
  305 00000964 E12FFF11        BX               r1



ARM Macro Assembler    Page 19 


  306 00000968         timer0_exit
  307 00000968         ;Clear interrupt
  308 00000968 E59F01E8        LDR              r0,=0xE0004000
  309 0000096C E5901000        LDR              r1, [r0]
  310 00000970 E3811002        ORR              r1,r1,#2
  311 00000974 E3C11001        BIC              r1,r1,#1
  312 00000978 E5801000        STR              r1,[r0]
  313 0000097C EA000043        B                FIQ_Exit
  314 00000980         
  315 00000980         TIMERINT1
  316 00000980         ;Check for timer interrupt
  317 00000980 E59F01F8        LDR              r0, =0xE0008000
  318 00000984 E5901000        LDR              r1, [r0]
  319 00000988 E3110002        TST              r1,#2
  320 0000098C 0A000016        BEQ              EINT1
  321 00000990         
  322 00000990 E59F4124        LDR              r4,=input
  323 00000994 EBFFFFFE        BL               display_digit_on_7_seg
  324 00000998         
  325 00000998 E59F01E4        LDR              r0,= 825
  326 0000099C E59F11E4        LDR              r1,=currentGameTimer
  327 000009A0 E5911000        LDR              r1,[r1]
  328 000009A4 E1500001        CMP              r0,r1
  329 000009A8 0A000003        BEQ              doCountTo1
  330 000009AC E2810001        ADD              r0,r1,#1
  331 000009B0 E59F11D0        LDR              r1,=currentGameTimer
  332 000009B4 E1C100B0        STRH             r0,[r1]
  333 000009B8 EA000005        B                timer1_exit
  334 000009BC         doCountTo1
  335 000009BC E3A00000        MOV              r0,#0
  336 000009C0 E59F11C0        LDR              r1,=currentGameTimer
  337 000009C4 E1C100B0        STRH             r0,[r1]
  338 000009C8 E59F11BC        LDR              r1,=decTime
  339 000009CC E1A0E00F        MOV              lr,pc
  340 000009D0 E12FFF11        BX               r1
  341 000009D4         timer1_exit
  342 000009D4         ;Clear interrupt
  343 000009D4 E59F01A4        LDR              r0,=0xE0008000
  344 000009D8 E5901000        LDR              r1, [r0]
  345 000009DC E3811002        ORR              r1,r1,#2
  346 000009E0 E3C11001        BIC              r1,r1,#1
  347 000009E4 E5801000        STR              r1,[r0]
  348 000009E8 EA000028        B                FIQ_Exit
  349 000009EC         EINT1
  350 000009EC         ; Check for EINT1 interrupt
  351 000009EC E59F019C        LDR              r0, =0xE01FC140
  352 000009F0 E5901000        LDR              r1, [r0]
  353 000009F4 E3110002        TST              r1, #2
  354 000009F8 0A000024        BEQ              FIQ_Exit
  355 000009FC         
  356 000009FC         ;Check flag status 
  357 000009FC E59F3190        LDR              r3,=onoffFlag ;Load flag loc
  358 00000A00 E5D3C000        LDRB             r12,[r3]    ;Load flag
  359 00000A04 E35C0001        CMP              r12,#1      ;Is flag 1?
  360 00000A08 0A000010        BEQ              set_flag    ;If so, goto set_fl
                                                            ag
  361 00000A0C         
  362 00000A0C         ;Reenable digit display with previous value
  363 00000A0C E3A0C001        MOV              r12,#1      ;Else, set reg to 1



ARM Macro Assembler    Page 20 


                                                            
  364 00000A10 E583C000        STR              r12,[r3]
  365 00000A14         
  366 00000A14 E59F00FC        LDR              r0,=0xE0004004
  367 00000A18 E5901000        LDR              r1,[r0]
  368 00000A1C E3811001        ORR              r1,r1,#1
  369 00000A20 E5801000        STR              r1,[r0]
  370 00000A24 E59F00F0        LDR              r0,=0xE0008004
  371 00000A28 E5901000        LDR              r1,[r0]
  372 00000A2C E3811001        ORR              r1,r1,#1
  373 00000A30 E5801000        STR              r1,[r0]
  374 00000A34         
  375 00000A34 E3A00067        MOV              r0,#103
  376 00000A38 EBFFFFFE        BL               illuminate_RGB_LED ;
  377 00000A3C         ; Clear Interrupt
  378 00000A3C E59F014C        LDR              r0, =0xE01FC140
  379 00000A40 E5901000        LDR              r1, [r0]
  380 00000A44 E3811002        ORR              r1, r1, #2
  381 00000A48 E5801000        STR              r1, [r0]
  382 00000A4C EA00000F        B                FIQ_Exit
  383 00000A50         
  384 00000A50         set_flag
  385 00000A50         ;Store input and clear display
  386 00000A50 E3A0C000        MOV              r12,#0      ;Set reg to 0
  387 00000A54 E5C3C000        STRB             r12,[r3]    ;Store to flag
  388 00000A58         
  389 00000A58 E59F00B8        LDR              r0,=0xE0004004
  390 00000A5C E5901000        LDR              r1,[r0]
  391 00000A60 E3C11001        BIC              r1,r1,#1
  392 00000A64 E5801000        STR              r1,[r0]
  393 00000A68 E59F00AC        LDR              r0,=0xE0008004
  394 00000A6C E5901000        LDR              r1,[r0]
  395 00000A70 E3C11001        BIC              r1,r1,#1
  396 00000A74 E5801000        STR              r1,[r0]
  397 00000A78         
  398 00000A78 E3A00062        MOV              r0,#98
  399 00000A7C EBFFFFFE        BL               illuminate_RGB_LED ;
  400 00000A80         ; Clear Interrupt 
  401 00000A80 E59F0108        LDR              r0, =0xE01FC140
  402 00000A84 E5901000        LDR              r1, [r0]
  403 00000A88 E3811002        ORR              r1, r1, #2
  404 00000A8C E5801000        STR              r1, [r0]
  405 00000A90         FIQ_Exit
  406 00000A90         ;Reload registers and exit interrupt mode
  407 00000A90 E8BD5FFF        LDMFD            SP!, {r0-r12, lr}
  408 00000A94 E25EF004        SUBS             pc, lr, #4
  409 00000A98         
  410 00000A98         pin_connect_block_setup_for_uart0
  411 00000A98 E92D4003        STMFD            sp!, {r0, r1, lr}
  412 00000A9C E59F0084        LDR              r0, =0xE002C000 ; PINSEL0
  413 00000AA0 E5901000        LDR              r1, [r0]
  414 00000AA4 E3811005        ORR              r1, r1, #5
  415 00000AA8 E3C1100A        BIC              r1, r1, #0xA
  416 00000AAC E5801000        STR              r1, [r0]
  417 00000AB0 E8BD4003        LDMFD            sp!, {r0, r1, lr}
  418 00000AB4 E12FFF1E        BX               lr
  419 00000AB8         
  420 00000AB8                 END
              E000C000 



ARM Macro Assembler    Page 21 


              00000000 
              00000000 
              00000000 
              E0028004 
              E002800C 
              0000B780 
              00009580 
              00008780 
              0000A680 
              0000B680 
              0000A380 
              0000B380 
              0000B480 
              0000B080 
              E0028008 
              00000000 
              E002C004 
              00000000 
              E0028018 
              E0028010 
              00000000 
              00000000 
              00000000 
              E0004004 
              E0008004 
              E000C004 
              00000000 
              E002C000 
              E0004014 
              E0008014 
              E000401C 
              00465000 
              E000801C 
              FFFFF000 
              00008070 
              E01FC148 
              E000C008 
              00000000 
              00000000 
              E0004000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E0008000 
              00000339 
              00000000 
              00000000 
              E01FC140 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab7_1.d -o.\objects\lab7_1.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM
\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --prede
fine="__UVISION_VERSION SETA 524" --list=.\listings\lab7.lst lab7.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

interrupts 00000000

Symbol: interrupts
   Definitions
      At line 1 in file lab7.s
   Uses
      None
Comment: interrupts unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

EINT1 000009EC

Symbol: EINT1
   Definitions
      At line 349 in file lab7.s
   Uses
      At line 320 in file lab7.s
Comment: EINT1 used once
EXIT 00000688

Symbol: EXIT
   Definitions
      At line 57 in file lab7.s
   Uses
      None
Comment: EXIT unused
FIQ_Exit 00000A90

Symbol: FIQ_Exit
   Definitions
      At line 405 in file lab7.s
   Uses
      At line 224 in file lab7.s
      At line 313 in file lab7.s
      At line 348 in file lab7.s
      At line 354 in file lab7.s
      At line 382 in file lab7.s

FIQ_Handler 0000083C

Symbol: FIQ_Handler
   Definitions
      At line 208 in file lab7.s
   Uses
      At line 3 in file lab7.s
Comment: FIQ_Handler used once
INCR 000003B8

Symbol: INCR
   Definitions
      At line 281 in file library7.s
   Uses
      At line 272 in file library7.s
Comment: INCR used once
TIMERINT0 000008A0

Symbol: TIMERINT0
   Definitions
      At line 244 in file lab7.s
   Uses
      At line 217 in file lab7.s
Comment: TIMERINT0 used once
TIMERINT1 00000980

Symbol: TIMERINT1
   Definitions
      At line 315 in file lab7.s
   Uses
      At line 249 in file lab7.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: TIMERINT1 used once
UARTINT0 00000840

Symbol: UARTINT0
   Definitions
      At line 212 in file lab7.s
   Uses
      None
Comment: UARTINT0 unused
UART_init 000005A8

Symbol: UART_init
   Definitions
      At line 457 in file library7.s
   Uses
      None
Comment: UART_init unused
bit_loop 00000548

Symbol: bit_loop
   Definitions
      At line 427 in file library7.s
   Uses
      At line 441 in file library7.s
Comment: bit_loop used once
blue 00000434

Symbol: blue
   Definitions
      At line 337 in file library7.s
   Uses
      At line 322 in file library7.s
Comment: blue used once
btn_digit 000004F8

Symbol: btn_digit
   Definitions
      At line 401 in file library7.s
   Uses
      At line 396 in file library7.s
Comment: btn_digit used once
btn_end 00000520

Symbol: btn_end
   Definitions
      At line 413 in file library7.s
   Uses
      At line 405 in file library7.s
Comment: btn_end used once
btn_letter 00000508

Symbol: btn_letter
   Definitions
      At line 406 in file library7.s
   Uses
      At line 398 in file library7.s
Comment: btn_letter used once
charBuf 00000674




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: charBuf
   Definitions
      At line 48 in file lab7.s
   Uses
      At line 116 in file lab7.s
      At line 131 in file lab7.s
      At line 221 in file lab7.s
      At line 229 in file lab7.s
      At line 238 in file lab7.s

color_select 000003E8

Symbol: color_select
   Definitions
      At line 314 in file library7.s
   Uses
      None
Comment: color_select unused
currentEnemyTimer 000005D8

Symbol: currentEnemyTimer
   Definitions
      At line 30 in file lab7.s
   Uses
      At line 253 in file lab7.s
      At line 258 in file lab7.s
      At line 281 in file lab7.s

currentGameTimer 000005E4

Symbol: currentGameTimer
   Definitions
      At line 36 in file lab7.s
   Uses
      At line 326 in file lab7.s
      At line 331 in file lab7.s
      At line 336 in file lab7.s

dglup 000001C8

Symbol: dglup
   Definitions
      At line 113 in file library7.s
   Uses
      At line 110 in file library7.s
Comment: dglup used once
display_digit_on_7_seg 000001A8

Symbol: display_digit_on_7_seg
   Definitions
      At line 103 in file library7.s
   Uses
      At line 6 in file lab7.s
      At line 294 in file library7.s
      At line 323 in file lab7.s

doCountTo1 000009BC

Symbol: doCountTo1



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 334 in file lab7.s
   Uses
      At line 329 in file lab7.s
Comment: doCountTo1 used once
doMoveMShip 000008FC

Symbol: doMoveMShip
   Definitions
      At line 271 in file lab7.s
   Uses
      At line 266 in file lab7.s
Comment: doMoveMShip used once
doUpdateBoard 00000918

Symbol: doUpdateBoard
   Definitions
      At line 279 in file lab7.s
   Uses
      At line 256 in file lab7.s
Comment: doUpdateBoard used once
endpr 0000065C

Symbol: endpr
   Definitions
      At line 44 in file lab7.s
   Uses
      At line 59 in file lab7.s
Comment: endpr used once
enemyTimerFin 000005D4

Symbol: enemyTimerFin
   Definitions
      At line 28 in file lab7.s
   Uses
      At line 66 in file lab7.s
      At line 251 in file lab7.s

green 00000424

Symbol: green
   Definitions
      At line 331 in file library7.s
   Uses
      At line 320 in file library7.s
Comment: green used once
handle_Char 00000744

Symbol: handle_Char
   Definitions
      At line 114 in file lab7.s
   Uses
      At line 297 in file lab7.s
Comment: handle_Char used once
illuminateLEDs 00000538

Symbol: illuminateLEDs
   Definitions
      At line 422 in file library7.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 7 in file lab7.s
Comment: illuminateLEDs used once
illuminate_RGB_LED 000003E4

Symbol: illuminate_RGB_LED
   Definitions
      At line 312 in file library7.s
   Uses
      At line 8 in file lab7.s
      At line 358 in file library7.s
      At line 376 in file lab7.s
      At line 399 in file lab7.s

input 000000C8

Symbol: input
   Definitions
      At line 35 in file library7.s
   Uses
      At line 59 in file library7.s
      At line 53 in file lab7.s
      At line 76 in file lab7.s
      At line 322 in file lab7.s

interrupt_init 00000794

Symbol: interrupt_init
   Definitions
      At line 136 in file lab7.s
   Uses
      At line 5 in file lab7.s
Comment: interrupt_init used once
lab7 00000678

Symbol: lab7
   Definitions
      At line 50 in file lab7.s
   Uses
      At line 2 in file lab7.s
Comment: lab7 used once
ledErr 00000000

Symbol: ledErr
   Definitions
      At line 23 in file library7.s
   Uses
      At line 452 in file library7.s
Comment: ledErr used once
led_cont 00000560

Symbol: led_cont
   Definitions
      At line 434 in file library7.s
   Uses
      At line 430 in file library7.s
      At line 432 in file library7.s

led_end 00000594



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols


Symbol: led_end
   Definitions
      At line 448 in file library7.s
   Uses
      None
Comment: led_end unused
led_err 0000059C

Symbol: led_err
   Definitions
      At line 451 in file library7.s
   Uses
      At line 433 in file library7.s
Comment: led_err used once
library 00000000

Symbol: library
   Definitions
      At line 1 in file library7.s
   Uses
      None
Comment: library unused
mShipCurrent 000005E0

Symbol: mShipCurrent
   Definitions
      At line 34 in file lab7.s
   Uses
      At line 263 in file lab7.s
      At line 268 in file lab7.s
      At line 273 in file lab7.s

mShipTimerEnd 000005DC

Symbol: mShipTimerEnd
   Definitions
      At line 32 in file lab7.s
   Uses
      At line 261 in file lab7.s
Comment: mShipTimerEnd used once
move_player 00000880

Symbol: move_player
   Definitions
      At line 234 in file lab7.s
   Uses
      At line 123 in file lab7.s
      At line 125 in file lab7.s
      At line 127 in file lab7.s
      At line 129 in file lab7.s

not_end 00000134

Symbol: not_end
   Definitions
      At line 68 in file library7.s
   Uses
      At line 66 in file library7.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Comment: not_end used once
onoffFlag 000005E8

Symbol: onoffFlag
   Definitions
      At line 38 in file lab7.s
   Uses
      At line 357 in file lab7.s
Comment: onoffFlag used once
output_character 000000F4

Symbol: output_character
   Definitions
      At line 48 in file library7.s
   Uses
      At line 10 in file lab7.s
      At line 53 in file library7.s
      At line 64 in file library7.s
      At line 87 in file library7.s

output_string 00000160

Symbol: output_string
   Definitions
      At line 81 in file library7.s
   Uses
      At line 9 in file lab7.s
      At line 292 in file library7.s
      At line 357 in file library7.s
      At line 417 in file library7.s
      At line 453 in file library7.s
      At line 60 in file lab7.s

output_string_end 00000188

Symbol: output_string_end
   Definitions
      At line 93 in file library7.s
   Uses
      At line 91 in file library7.s
Comment: output_string_end used once
output_string_loop 00000170

Symbol: output_string_loop
   Definitions
      At line 86 in file library7.s
   Uses
      At line 92 in file library7.s
Comment: output_string_loop used once
pin_connect_block_setup_for_uart0 00000A98

Symbol: pin_connect_block_setup_for_uart0
   Definitions
      At line 410 in file lab7.s
   Uses
      At line 4 in file lab7.s
Comment: pin_connect_block_setup_for_uart0 used once
prompt 000005EC




ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

Symbol: prompt
   Definitions
      At line 40 in file lab7.s
   Uses
      None
Comment: prompt unused
purple 00000444

Symbol: purple
   Definitions
      At line 343 in file library7.s
   Uses
      At line 326 in file library7.s
Comment: purple used once
read_character 000000D0

Symbol: read_character
   Definitions
      At line 37 in file library7.s
   Uses
      At line 12 in file lab7.s
      At line 42 in file library7.s
      At line 63 in file library7.s
      At line 220 in file lab7.s

read_from_push_btns 00000474

Symbol: read_from_push_btns
   Definitions
      At line 361 in file library7.s
   Uses
      None
Comment: read_from_push_btns unused
read_loop 00000120

Symbol: read_loop
   Definitions
      At line 62 in file library7.s
   Uses
      At line 72 in file library7.s
Comment: read_loop used once
read_string 00000110

Symbol: read_string
   Definitions
      At line 57 in file library7.s
   Uses
      At line 15 in file lab7.s
      At line 293 in file library7.s

red 0000042C

Symbol: red
   Definitions
      At line 334 in file library7.s
   Uses
      At line 318 in file library7.s
Comment: red used once
rgbErr 0000002C



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols


Symbol: rgbErr
   Definitions
      At line 25 in file library7.s
   Uses
      At line 356 in file library7.s
Comment: rgbErr used once
rgb_cont 0000044C

Symbol: rgb_cont
   Definitions
      At line 346 in file library7.s
   Uses
      At line 330 in file library7.s
      At line 333 in file library7.s
      At line 336 in file library7.s
      At line 339 in file library7.s
      At line 342 in file library7.s
      At line 345 in file library7.s

rgb_err 00000468

Symbol: rgb_err
   Definitions
      At line 355 in file library7.s
   Uses
      At line 327 in file library7.s
Comment: rgb_err used once
segErr 00000064

Symbol: segErr
   Definitions
      At line 27 in file library7.s
   Uses
      At line 291 in file library7.s
Comment: segErr used once
segPos 000000B8

Symbol: segPos
   Definitions
      At line 31 in file library7.s
   Uses
      At line 107 in file library7.s
      At line 274 in file library7.s
      At line 282 in file library7.s

segPrompt 0000008C

Symbol: segPrompt
   Definitions
      At line 29 in file library7.s
   Uses
      None
Comment: segPrompt unused
seg_clear 00000654

Symbol: seg_clear
   Definitions
      At line 42 in file lab7.s



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: seg_clear unused
seg_err 000003D4

Symbol: seg_err
   Definitions
      At line 290 in file library7.s
   Uses
      None
Comment: seg_err unused
set_flag 00000A50

Symbol: set_flag
   Definitions
      At line 384 in file lab7.s
   Uses
      At line 360 in file lab7.s
Comment: set_flag used once
sevenSegCont 00000368

Symbol: sevenSegCont
   Definitions
      At line 243 in file library7.s
   Uses
      At line 181 in file library7.s
      At line 184 in file library7.s
      At line 194 in file library7.s
      At line 197 in file library7.s
      At line 200 in file library7.s
      At line 203 in file library7.s
      At line 206 in file library7.s
      At line 209 in file library7.s
      At line 212 in file library7.s
      At line 215 in file library7.s
      At line 218 in file library7.s
      At line 221 in file library7.s
      At line 224 in file library7.s
      At line 227 in file library7.s
      At line 230 in file library7.s
      At line 233 in file library7.s
      At line 236 in file library7.s
      At line 239 in file library7.s
      At line 242 in file library7.s

sevenSegExit 000003B0

Symbol: sevenSegExit
   Definitions
      At line 277 in file library7.s
   Uses
      At line 289 in file library7.s
Comment: sevenSegExit used once
sevenSegFin 0000036C

Symbol: sevenSegFin
   Definitions
      At line 257 in file library7.s
   Uses



ARM Macro Assembler    Page 11 Alphabetic symbol ordering
Relocatable symbols

      At line 244 in file library7.s
Comment: sevenSegFin used once
shoot 00000860

Symbol: shoot
   Definitions
      At line 225 in file lab7.s
   Uses
      At line 119 in file lab7.s
      At line 121 in file lab7.s

stage_fin 000004E0

Symbol: stage_fin
   Definitions
      At line 393 in file library7.s
   Uses
      At line 391 in file library7.s
Comment: stage_fin used once
stage_four 000004D0

Symbol: stage_four
   Definitions
      At line 388 in file library7.s
   Uses
      At line 386 in file library7.s
Comment: stage_four used once
stage_three 000004C0

Symbol: stage_three
   Definitions
      At line 383 in file library7.s
   Uses
      At line 381 in file library7.s
Comment: stage_three used once
stage_two 000004B0

Symbol: stage_two
   Definitions
      At line 378 in file library7.s
   Uses
      At line 376 in file library7.s
Comment: stage_two used once
start_timers 000006CC

Symbol: start_timers
   Definitions
      At line 80 in file lab7.s
   Uses
      At line 13 in file lab7.s
Comment: start_timers used once
stop_timers 00000708

Symbol: stop_timers
   Definitions
      At line 97 in file lab7.s
   Uses
      At line 16 in file lab7.s
Comment: stop_timers used once



ARM Macro Assembler    Page 12 Alphabetic symbol ordering
Relocatable symbols

tailLoc 000000BC

Symbol: tailLoc
   Definitions
      At line 33 in file library7.s
   Uses
      At line 111 in file library7.s
      At line 114 in file library7.s
      At line 186 in file library7.s
      At line 286 in file library7.s
      At line 54 in file lab7.s

tempStorage 0000066C

Symbol: tempStorage
   Definitions
      At line 46 in file lab7.s
   Uses
      None
Comment: tempStorage unused
timer0_cont 00000934

Symbol: timer0_cont
   Definitions
      At line 288 in file lab7.s
   Uses
      At line 270 in file lab7.s
      At line 278 in file lab7.s
      At line 286 in file lab7.s

timer0_exit 00000968

Symbol: timer0_exit
   Definitions
      At line 306 in file lab7.s
   Uses
      None
Comment: timer0_exit unused
timer1_exit 000009D4

Symbol: timer1_exit
   Definitions
      At line 341 in file lab7.s
   Uses
      At line 333 in file lab7.s
Comment: timer1_exit used once
tis0 000002E8

Symbol: tis0
   Definitions
      At line 195 in file library7.s
   Uses
      At line 133 in file library7.s
Comment: tis0 used once
tis1 000002F0

Symbol: tis1
   Definitions
      At line 198 in file library7.s



ARM Macro Assembler    Page 13 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 135 in file library7.s
Comment: tis1 used once
tis2 000002F8

Symbol: tis2
   Definitions
      At line 201 in file library7.s
   Uses
      At line 137 in file library7.s
Comment: tis2 used once
tis3 00000300

Symbol: tis3
   Definitions
      At line 204 in file library7.s
   Uses
      At line 139 in file library7.s
Comment: tis3 used once
tis4 00000308

Symbol: tis4
   Definitions
      At line 207 in file library7.s
   Uses
      At line 141 in file library7.s
Comment: tis4 used once
tis5 00000310

Symbol: tis5
   Definitions
      At line 210 in file library7.s
   Uses
      At line 143 in file library7.s
Comment: tis5 used once
tis6 00000318

Symbol: tis6
   Definitions
      At line 213 in file library7.s
   Uses
      At line 145 in file library7.s
Comment: tis6 used once
tis7 00000320

Symbol: tis7
   Definitions
      At line 216 in file library7.s
   Uses
      At line 147 in file library7.s
Comment: tis7 used once
tis8 00000328

Symbol: tis8
   Definitions
      At line 219 in file library7.s
   Uses
      At line 149 in file library7.s
Comment: tis8 used once



ARM Macro Assembler    Page 14 Alphabetic symbol ordering
Relocatable symbols

tis9 00000330

Symbol: tis9
   Definitions
      At line 222 in file library7.s
   Uses
      At line 151 in file library7.s
Comment: tis9 used once
tisA 00000338

Symbol: tisA
   Definitions
      At line 225 in file library7.s
   Uses
      At line 153 in file library7.s
      At line 155 in file library7.s

tisB 00000340

Symbol: tisB
   Definitions
      At line 228 in file library7.s
   Uses
      At line 157 in file library7.s
      At line 159 in file library7.s

tisC 00000348

Symbol: tisC
   Definitions
      At line 231 in file library7.s
   Uses
      At line 161 in file library7.s
      At line 163 in file library7.s

tisClear 000002E0

Symbol: tisClear
   Definitions
      At line 192 in file library7.s
   Uses
      At line 130 in file library7.s
Comment: tisClear used once
tisD 00000350

Symbol: tisD
   Definitions
      At line 234 in file library7.s
   Uses
      At line 165 in file library7.s
      At line 167 in file library7.s

tisE 00000358

Symbol: tisE
   Definitions
      At line 237 in file library7.s
   Uses
      At line 169 in file library7.s



ARM Macro Assembler    Page 15 Alphabetic symbol ordering
Relocatable symbols

      At line 171 in file library7.s

tisF 00000360

Symbol: tisF
   Definitions
      At line 240 in file library7.s
   Uses
      At line 173 in file library7.s
      At line 175 in file library7.s

tisInit 000002BC

Symbol: tisInit
   Definitions
      At line 179 in file library7.s
   Uses
      At line 122 in file library7.s
Comment: tisInit used once
tisInv 000002C4

Symbol: tisInv
   Definitions
      At line 182 in file library7.s
   Uses
      At line 176 in file library7.s
Comment: tisInv used once
tisNull 000002CC

Symbol: tisNull
   Definitions
      At line 185 in file library7.s
   Uses
      At line 120 in file library7.s
Comment: tisNull used once
update_level 00000698

Symbol: update_level
   Definitions
      At line 64 in file lab7.s
   Uses
      At line 14 in file lab7.s
Comment: update_level used once
update_score 000006B4

Symbol: update_score
   Definitions
      At line 73 in file lab7.s
   Uses
      At line 11 in file lab7.s
Comment: update_score used once
white 0000041C

Symbol: white
   Definitions
      At line 328 in file library7.s
   Uses
      At line 316 in file library7.s
Comment: white used once



ARM Macro Assembler    Page 16 Alphabetic symbol ordering
Relocatable symbols

yellow 0000043C

Symbol: yellow
   Definitions
      At line 340 in file library7.s
   Uses
      At line 324 in file library7.s
Comment: yellow used once
102 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BLUE 00000004

Symbol: BLUE
   Definitions
      At line 18 in file library7.s
   Uses
      At line 338 in file library7.s
Comment: BLUE used once
GREEN 00000020

Symbol: GREEN
   Definitions
      At line 17 in file library7.s
   Uses
      At line 332 in file library7.s
Comment: GREEN used once
IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 10 in file library7.s
   Uses
      At line 126 in file library7.s
Comment: IO0CLR used once
IO0DIR E0028008

Symbol: IO0DIR
   Definitions
      At line 6 in file library7.s
   Uses
      At line 258 in file library7.s
      At line 350 in file library7.s

IO0PIN E0028000

Symbol: IO0PIN
   Definitions
      At line 12 in file library7.s
   Uses
      None
Comment: IO0PIN unused
IO0SET E0028004

Symbol: IO0SET
   Definitions
      At line 8 in file library7.s
   Uses
      At line 124 in file library7.s
      At line 267 in file library7.s

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 11 in file library7.s
   Uses
      None
Comment: IO1CLR unused
IO1DIR E0028018



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: IO1DIR
   Definitions
      At line 7 in file library7.s
   Uses
      At line 364 in file library7.s
      At line 445 in file library7.s

IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 13 in file library7.s
   Uses
      At line 368 in file library7.s
Comment: IO1PIN used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 9 in file library7.s
   Uses
      None
Comment: IO1SET unused
PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 4 in file library7.s
   Uses
      None
Comment: PINSEL0 unused
PINSEL1 E002C004

Symbol: PINSEL1
   Definitions
      At line 5 in file library7.s
   Uses
      At line 347 in file library7.s
      At line 442 in file library7.s

PURPLE 00000006

Symbol: PURPLE
   Definitions
      At line 19 in file library7.s
   Uses
      At line 344 in file library7.s
Comment: PURPLE used once
RED 00000002

Symbol: RED
   Definitions
      At line 16 in file library7.s
   Uses
      At line 335 in file library7.s
Comment: RED used once
RGBOFF 00000000




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Symbol: RGBOFF
   Definitions
      At line 21 in file library7.s
   Uses
      None
Comment: RGBOFF unused
U0LSR 00000014

Symbol: U0LSR
   Definitions
      At line 3 in file library7.s
   Uses
      At line 39 in file library7.s
      At line 50 in file library7.s

WHITE 00000026

Symbol: WHITE
   Definitions
      At line 15 in file library7.s
   Uses
      At line 329 in file library7.s
Comment: WHITE used once
YELLOW 00000022

Symbol: YELLOW
   Definitions
      At line 20 in file library7.s
   Uses
      At line 341 in file library7.s
Comment: YELLOW used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

decTime 00000000

Symbol: decTime
   Definitions
      At line 18 in file lab7.s
   Uses
      At line 338 in file lab7.s
Comment: decTime used once
generateEnemyShot 00000000

Symbol: generateEnemyShot
   Definitions
      At line 26 in file lab7.s
   Uses
      At line 293 in file lab7.s
Comment: generateEnemyShot used once
generateMother 00000000

Symbol: generateMother
   Definitions
      At line 23 in file lab7.s
   Uses
      At line 289 in file lab7.s
Comment: generateMother used once
generatePlayerShot 00000000

Symbol: generatePlayerShot
   Definitions
      At line 24 in file lab7.s
   Uses
      At line 226 in file lab7.s
Comment: generatePlayerShot used once
moveMother 00000000

Symbol: moveMother
   Definitions
      At line 22 in file lab7.s
   Uses
      At line 275 in file lab7.s
Comment: moveMother used once
movePlayer 00000000

Symbol: movePlayer
   Definitions
      At line 20 in file lab7.s
   Uses
      At line 235 in file lab7.s
Comment: movePlayer used once
moveShot 00000000

Symbol: moveShot
   Definitions
      At line 25 in file lab7.s
   Uses
      At line 299 in file lab7.s
Comment: moveShot used once
printBoard 00000000

Symbol: printBoard



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 19 in file lab7.s
   Uses
      At line 303 in file lab7.s
Comment: printBoard used once
updateBoard 00000000

Symbol: updateBoard
   Definitions
      At line 21 in file lab7.s
   Uses
      At line 283 in file lab7.s
Comment: updateBoard used once
9 symbols
464 symbols in table
